// tslint:disable
// @ts-nocheck
/**
 * チョコットランド計算機(非公式)
 * チョコットランド計算機 - 中間サーバ間通信のAPI仕様   
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
// eslint-disable-next-line
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * ログサービスの該当エラーに対するリンク
     * @type {string}
     * @memberof ModelError
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * バリデーション情報の配列
     * @type {Array<ValidationInfo>}
     * @memberof ModelError
     */
    'validationInfo'?: Array<ValidationInfo>;
    /**
     * エラー時に案内するページのリンク
     * @type {string}
     * @memberof ModelError
     */
    'browserLink'?: string;
    /**
     * 何画面前に戻る必要があるか
     * @type {number}
     * @memberof ModelError
     */
    'numberOfBackScreen'?: number;
}
/**
 * 
 * @export
 * @interface ValidationInfo
 */
export interface ValidationInfo {
    /**
     * 対象のフィールド名
     * @type {string}
     * @memberof ValidationInfo
     */
    'field': string;
    /**
     * 不正な入力値
     * @type {string}
     * @memberof ValidationInfo
     */
    'rejectedValue': string;
    /**
     * バリデーションメッセージ
     * @type {string}
     * @memberof ValidationInfo
     */
    'message': string;
}

/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 魔獣缶・シールを使用 
         * @summary 魔獣缶・シールを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemCanPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/can`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アタークリキッドを使用 
         * @summary アタークリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemLiquidAtkPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/liquid/atk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マモールリキッドを使用 
         * @summary マモールリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemLiquidDefPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/liquid/def`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マホアタリキッドを使用 
         * @summary マホアタリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemLiquidMatPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/liquid/mat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マホマモリキッドを使用 
         * @summary マホマモリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemLiquidMdfPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/liquid/mdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ALLビタを使用 
         * @summary ALLビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaAllPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/vita/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INTビタを使用 
         * @summary INTビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaIntPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/vita/int`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * LUKビタを使用 
         * @summary LUKビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaLukPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/vita/luk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POWビタを使用 
         * @summary POWビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaPowPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/vita/pow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SPDビタを使用 
         * @summary SPDビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaSpdPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/vita/spd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * VITビタを使用 
         * @summary VITビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaVitPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/item/vita/vit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 魔獣缶・シールを使用 
         * @summary 魔獣缶・シールを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemCanPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemCanPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アタークリキッドを使用 
         * @summary アタークリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemLiquidAtkPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemLiquidAtkPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * マモールリキッドを使用 
         * @summary マモールリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemLiquidDefPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemLiquidDefPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * マホアタリキッドを使用 
         * @summary マホアタリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemLiquidMatPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemLiquidMatPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * マホマモリキッドを使用 
         * @summary マホマモリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemLiquidMdfPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemLiquidMdfPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ALLビタを使用 
         * @summary ALLビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemVitaAllPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemVitaAllPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INTビタを使用 
         * @summary INTビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemVitaIntPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemVitaIntPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * LUKビタを使用 
         * @summary LUKビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemVitaLukPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemVitaLukPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POWビタを使用 
         * @summary POWビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemVitaPowPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemVitaPowPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SPDビタを使用 
         * @summary SPDビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemVitaSpdPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemVitaSpdPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * VITビタを使用 
         * @summary VITビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiItemVitaVitPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiItemVitaVitPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemApiFp(configuration)
    return {
        /**
         * 魔獣缶・シールを使用 
         * @summary 魔獣缶・シールを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemCanPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemCanPost(options).then((request) => request(axios, basePath));
        },
        /**
         * アタークリキッドを使用 
         * @summary アタークリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemLiquidAtkPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemLiquidAtkPost(options).then((request) => request(axios, basePath));
        },
        /**
         * マモールリキッドを使用 
         * @summary マモールリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemLiquidDefPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemLiquidDefPost(options).then((request) => request(axios, basePath));
        },
        /**
         * マホアタリキッドを使用 
         * @summary マホアタリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemLiquidMatPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemLiquidMatPost(options).then((request) => request(axios, basePath));
        },
        /**
         * マホマモリキッドを使用 
         * @summary マホマモリキッドを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemLiquidMdfPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemLiquidMdfPost(options).then((request) => request(axios, basePath));
        },
        /**
         * ALLビタを使用 
         * @summary ALLビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaAllPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemVitaAllPost(options).then((request) => request(axios, basePath));
        },
        /**
         * INTビタを使用 
         * @summary INTビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaIntPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemVitaIntPost(options).then((request) => request(axios, basePath));
        },
        /**
         * LUKビタを使用 
         * @summary LUKビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaLukPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemVitaLukPost(options).then((request) => request(axios, basePath));
        },
        /**
         * POWビタを使用 
         * @summary POWビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaPowPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemVitaPowPost(options).then((request) => request(axios, basePath));
        },
        /**
         * SPDビタを使用 
         * @summary SPDビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaSpdPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemVitaSpdPost(options).then((request) => request(axios, basePath));
        },
        /**
         * VITビタを使用 
         * @summary VITビタを使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiItemVitaVitPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiItemVitaVitPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * 魔獣缶・シールを使用 
     * @summary 魔獣缶・シールを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemCanPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemCanPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アタークリキッドを使用 
     * @summary アタークリキッドを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemLiquidAtkPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemLiquidAtkPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マモールリキッドを使用 
     * @summary マモールリキッドを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemLiquidDefPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemLiquidDefPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マホアタリキッドを使用 
     * @summary マホアタリキッドを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemLiquidMatPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemLiquidMatPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マホマモリキッドを使用 
     * @summary マホマモリキッドを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemLiquidMdfPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemLiquidMdfPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ALLビタを使用 
     * @summary ALLビタを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemVitaAllPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemVitaAllPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INTビタを使用 
     * @summary INTビタを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemVitaIntPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemVitaIntPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * LUKビタを使用 
     * @summary LUKビタを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemVitaLukPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemVitaLukPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POWビタを使用 
     * @summary POWビタを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemVitaPowPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemVitaPowPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SPDビタを使用 
     * @summary SPDビタを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemVitaSpdPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemVitaSpdPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * VITビタを使用 
     * @summary VITビタを使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public apiItemVitaVitPost(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).apiItemVitaVitPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobApi - axios parameter creator
 * @export
 */
export const JobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 職業情報読み込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserJobGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 職業情報登録
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserJobPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobApi - functional programming interface
 * @export
 */
export const JobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 職業情報読み込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserJobGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserJobGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 職業情報登録
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserJobPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserJobPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobApi - factory interface
 * @export
 */
export const JobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobApiFp(configuration)
    return {
        /**
         * 
         * @summary 職業情報読み込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserJobGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiUserJobGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 職業情報登録
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserJobPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiUserJobPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobApi - object-oriented interface
 * @export
 * @class JobApi
 * @extends {BaseAPI}
 */
export class JobApi extends BaseAPI {
    /**
     * 
     * @summary 職業情報読み込み
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public apiUserJobGet(options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).apiUserJobGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 職業情報登録
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public apiUserJobPost(options?: AxiosRequestConfig) {
        return JobApiFp(this.configuration).apiUserJobPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary user情報読み込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary user情報登録
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary user情報読み込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary user情報登録
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary user情報読み込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary user情報登録
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPost(options?: any): AxiosPromise<string> {
            return localVarFp.apiUserPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary user情報読み込み
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary user情報登録
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserPost(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserPost(options).then((request) => request(this.axios, this.basePath));
    }
}


